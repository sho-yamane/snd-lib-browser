/**
   * @license
   * Snd.js v1.0.1
   * Released under the MIT License.
   */
var Snd=function(){"use strict";function t(t){if(t.__esModule)return t;var e=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(t).forEach((function(o){var n=Object.getOwnPropertyDescriptor(t,o);Object.defineProperty(e,o,n.get?n:{enumerable:!0,get:function(){return t[o]}})})),e}var e={};function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},n(t,e)};function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}var i=function(){return i=Object.assign||function(t){for(var e,o=1,n=arguments.length;o<n;o++)for(var r in e=arguments[o])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},i.apply(this,arguments)};function s(t,e){var o={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(o[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(t);r<n.length;r++)e.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(t,n[r])&&(o[n[r]]=t[n[r]])}return o}function a(t,e,n,r){var i,s=arguments.length,a=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"===("undefined"==typeof Reflect?"undefined":o(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var l=t.length-1;l>=0;l--)(i=t[l])&&(a=(s<3?i(a):s>3?i(e,n,a):i(e,n))||a);return s>3&&a&&Object.defineProperty(e,n,a),a}function l(t,e){return function(o,n){e(o,n,t)}}function u(t,e){if("object"===("undefined"==typeof Reflect?"undefined":o(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function d(t,e,o,n){return new(o||(o=Promise))((function(r,i){function s(t){try{l(n.next(t))}catch(t){i(t)}}function a(t){try{l(n.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,a)}l((n=n.apply(t,e||[])).next())}))}function _(t,e){var o,n,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(l){return function(a){if(o)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(s=0)),s;)try{if(o=1,n&&(r=2&a[0]?n.return:a[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,a[1])).done)return r;switch(n=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{o=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}}var c=Object.create?function(t,e,o,n){void 0===n&&(n=o);var r=Object.getOwnPropertyDescriptor(e,o);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[o]}}),Object.defineProperty(t,n,r)}:function(t,e,o,n){void 0===n&&(n=o),t[n]=e[o]};function p(t,e){for(var o in t)"default"===o||Object.prototype.hasOwnProperty.call(e,o)||c(e,t,o)}function h(t){var e="function"==typeof Symbol&&Symbol.iterator,o=e&&t[e],n=0;if(o)return o.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function f(t,e){var o="function"==typeof Symbol&&t[Symbol.iterator];if(!o)return t;var n,r,i=o.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(t){r={error:t}}finally{try{n&&!n.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}return s}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(f(arguments[e]));return t}function m(){for(var t=0,e=0,o=arguments.length;e<o;e++)t+=arguments[e].length;var n=Array(t),r=0;for(e=0;e<o;e++)for(var i=arguments[e],s=0,a=i.length;s<a;s++,r++)n[r]=i[s];return n}function v(t,e,o){if(o||2===arguments.length)for(var n,r=0,i=e.length;r<i;r++)!n&&r in e||(n||(n=Array.prototype.slice.call(e,0,r)),n[r]=e[r]);return t.concat(n||Array.prototype.slice.call(e))}function w(t){return this instanceof w?(this.v=t,this):new w(t)}function S(t,e,o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,r=o.apply(t,e||[]),i=[];return n={},s("next"),s("throw"),s("return"),n[Symbol.asyncIterator]=function(){return this},n;function s(t){r[t]&&(n[t]=function(e){return new Promise((function(o,n){i.push([t,e,o,n])>1||a(t,e)}))})}function a(t,e){try{(o=r[t](e)).value instanceof w?Promise.resolve(o.value.v).then(l,u):d(i[0][2],o)}catch(t){d(i[0][3],t)}var o}function l(t){a("next",t)}function u(t){a("throw",t)}function d(t,e){t(e),i.shift(),i.length&&a(i[0][0],i[0][1])}}function b(t){var e,o;return e={},n("next"),n("throw",(function(t){throw t})),n("return"),e[Symbol.iterator]=function(){return this},e;function n(n,r){e[n]=t[n]?function(e){return(o=!o)?{value:w(t[n](e)),done:!1}:r?r(e):e}:r}}function O(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,o=t[Symbol.asyncIterator];return o?o.call(t):(t=h(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(o){e[o]=t[o]&&function(e){return new Promise((function(n,r){(function(t,e,o,n){Promise.resolve(n).then((function(e){t({value:e,done:o})}),e)})(n,r,(e=t[o](e)).done,e.value)}))}}}function g(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var E=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e};function T(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var o in t)"default"!==o&&Object.prototype.hasOwnProperty.call(t,o)&&c(e,t,o);return E(e,t),e}function N(t){return t&&t.__esModule?t:{default:t}}function A(t,e,o,n){if("a"===o&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===o?n:"a"===o?n.call(t):n?n.value:e.get(t)}function D(t,e,o,n,r){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?r.call(t,o):r?r.value=o:e.set(t,o),o}function P(t,e){if(null===e||"object"!==o(e)&&"function"!=typeof e)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof t?e===t:t.has(e)}function j(t,e,n){if(null!=e){if("object"!==o(e)&&"function"!=typeof e)throw new TypeError("Object expected.");var r;if(n){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");r=e[Symbol.asyncDispose]}if(void 0===r){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");r=e[Symbol.dispose]}if("function"!=typeof r)throw new TypeError("Object not disposable.");t.stack.push({value:e,dispose:r,async:n})}else n&&t.stack.push({async:!0});return e}var L="function"==typeof SuppressedError?SuppressedError:function(t,e,o){var n=new Error(o);return n.name="SuppressedError",n.error=t,n.suppressed=e,n};function B(t){function e(e){t.error=t.hasError?new L(e,t.error,"An error was suppressed during disposal."):e,t.hasError=!0}return function o(){for(;t.stack.length;){var n=t.stack.pop();try{var r=n.dispose&&n.dispose.call(n.value);if(n.async)return Promise.resolve(r).then(o,(function(t){return e(t),o()}))}catch(t){e(t)}}if(t.hasError)throw t.error}()}var x={__extends:r,__assign:i,__rest:s,__decorate:a,__param:l,__metadata:u,__awaiter:d,__generator:_,__createBinding:c,__exportStar:p,__values:h,__read:f,__spread:y,__spreadArrays:m,__spreadArray:v,__await:w,__asyncGenerator:S,__asyncDelegator:b,__asyncValues:O,__makeTemplateObject:g,__importStar:T,__importDefault:N,__classPrivateFieldGet:A,__classPrivateFieldSet:D,__classPrivateFieldIn:P,__addDisposableResource:j,__disposeResources:B},V=Object.freeze({__proto__:null,__extends:r,get __assign(){return i},__rest:s,__decorate:a,__param:l,__esDecorate:function(t,e,n,r,i,s){function a(t){if(void 0!==t&&"function"!=typeof t)throw new TypeError("Function expected");return t}for(var l,u=r.kind,d="getter"===u?"get":"setter"===u?"set":"value",_=!e&&t?r.static?t:t.prototype:null,c=e||(_?Object.getOwnPropertyDescriptor(_,r.name):{}),p=!1,h=n.length-1;h>=0;h--){var f={};for(var y in r)f[y]="access"===y?{}:r[y];for(var y in r.access)f.access[y]=r.access[y];f.addInitializer=function(t){if(p)throw new TypeError("Cannot add initializers after decoration has completed");s.push(a(t||null))};var m=(0,n[h])("accessor"===u?{get:c.get,set:c.set}:c[d],f);if("accessor"===u){if(void 0===m)continue;if(null===m||"object"!==o(m))throw new TypeError("Object expected");(l=a(m.get))&&(c.get=l),(l=a(m.set))&&(c.set=l),(l=a(m.init))&&i.unshift(l)}else(l=a(m))&&("field"===u?i.unshift(l):c[d]=l)}_&&Object.defineProperty(_,r.name,c),p=!0},__runInitializers:function(t,e,o){for(var n=arguments.length>2,r=0;r<e.length;r++)o=n?e[r].call(t,o):e[r].call(t);return n?o:void 0},__propKey:function(t){return"symbol"===o(t)?t:"".concat(t)},__setFunctionName:function(t,e,n){return"symbol"===o(e)&&(e=e.description?"[".concat(e.description,"]"):""),Object.defineProperty(t,"name",{configurable:!0,value:n?"".concat(n," ",e):e})},__metadata:u,__awaiter:d,__generator:_,__createBinding:c,__exportStar:p,__values:h,__read:f,__spread:y,__spreadArrays:m,__spreadArray:v,__await:w,__asyncGenerator:S,__asyncDelegator:b,__asyncValues:O,__makeTemplateObject:g,__importStar:T,__importDefault:N,__classPrivateFieldGet:A,__classPrivateFieldSet:D,__classPrivateFieldIn:P,__addDisposableResource:j,__disposeResources:B,default:x}),I=t(V),K={},U={exports:{}};!function(t){var e=Object.prototype.hasOwnProperty,o="~";function n(){}function r(t,e,o){this.fn=t,this.context=e,this.once=o||!1}function i(t,e,n,i,s){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new r(n,i||t,s),l=o?o+e:e;return t._events[l]?t._events[l].fn?t._events[l]=[t._events[l],a]:t._events[l].push(a):(t._events[l]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function a(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(o=!1)),a.prototype.eventNames=function(){var t,n,r=[];if(0===this._eventsCount)return r;for(n in t=this._events)e.call(t,n)&&r.push(o?n.slice(1):n);return Object.getOwnPropertySymbols?r.concat(Object.getOwnPropertySymbols(t)):r},a.prototype.listeners=function(t){var e=o?o+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,i=n.length,s=new Array(i);r<i;r++)s[r]=n[r].fn;return s},a.prototype.listenerCount=function(t){var e=o?o+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,r,i,s){var a=o?o+t:t;if(!this._events[a])return!1;var l,u,d=this._events[a],_=arguments.length;if(d.fn){switch(d.once&&this.removeListener(t,d.fn,void 0,!0),_){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,e),!0;case 3:return d.fn.call(d.context,e,n),!0;case 4:return d.fn.call(d.context,e,n,r),!0;case 5:return d.fn.call(d.context,e,n,r,i),!0;case 6:return d.fn.call(d.context,e,n,r,i,s),!0}for(u=1,l=new Array(_-1);u<_;u++)l[u-1]=arguments[u];d.fn.apply(d.context,l)}else{var c,p=d.length;for(u=0;u<p;u++)switch(d[u].once&&this.removeListener(t,d[u].fn,void 0,!0),_){case 1:d[u].fn.call(d[u].context);break;case 2:d[u].fn.call(d[u].context,e);break;case 3:d[u].fn.call(d[u].context,e,n);break;case 4:d[u].fn.call(d[u].context,e,n,r);break;default:if(!l)for(c=1,l=new Array(_-1);c<_;c++)l[c-1]=arguments[c];d[u].fn.apply(d[u].context,l)}}return!0},a.prototype.on=function(t,e,o){return i(this,t,e,o,!1)},a.prototype.once=function(t,e,o){return i(this,t,e,o,!0)},a.prototype.removeListener=function(t,e,n,r){var i=o?o+t:t;if(!this._events[i])return this;if(!e)return s(this,i),this;var a=this._events[i];if(a.fn)a.fn!==e||r&&!a.once||n&&a.context!==n||s(this,i);else{for(var l=0,u=[],d=a.length;l<d;l++)(a[l].fn!==e||r&&!a[l].once||n&&a[l].context!==n)&&u.push(a[l]);u.length?this._events[i]=1===u.length?u[0]:u:s(this,i)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=o?o+t:t,this._events[e]&&s(this,e)):(this._events=new n,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=o,a.EventEmitter=a,t.exports=a}(U);var k={},C={resources:["./assets/sounds/sprite/01/audioSprite.ogg","./assets/sounds/sprite/01/audioSprite.m4a","./assets/sounds/sprite/01/audioSprite.mp3","./assets/sounds/sprite/01/audioSprite.ac3"],spritemap:{button:{start:0,end:.1001814058956916,loop:!1},caution:{start:2,end:2.160544217687075,loop:!1},celebration:{start:4,end:5,loop:!1},disabled:{start:6,end:6.070113378684807,loop:!1},notification:{start:8,end:8.30031746031746,loop:!1},progress_loop:{start:10,end:11.5,loop:!1},ringtone_loop:{start:13,end:15,loop:!1},select:{start:16,end:16.1,loop:!1},swipe:{start:18,end:18.15,loop:!1},swipe_01:{start:20,end:20.15,loop:!1},swipe_02:{start:22,end:22.150272108843538,loop:!1},swipe_03:{start:24,end:24.150272108843538,loop:!1},swipe_04:{start:26,end:26.15,loop:!1},swipe_05:{start:28,end:28.15,loop:!1},tap_01:{start:30,end:30.01,loop:!1},tap_02:{start:32,end:32.01,loop:!1},tap_03:{start:34,end:34.01004535147392,loop:!1},tap_04:{start:36,end:36.01002267573696,loop:!1},tap_05:{start:38,end:38.01,loop:!1},toggle_off:{start:40,end:40.09972789115646,loop:!1},toggle_on:{start:42,end:42.09972789115646,loop:!1},transition_down:{start:44,end:44.10018140589569,loop:!1},transition_up:{start:46,end:46.10063492063492,loop:!1},type_01:{start:48,end:48.010068027210885,loop:!1},type_02:{start:50,end:50.01011337868481,loop:!1},type_03:{start:52,end:52.010068027210885,loop:!1},type_04:{start:54,end:54.0102947845805,loop:!1},type_05:{start:56,end:56.01011337868481,loop:!1}}},G={resources:["./assets/sounds/sprite/02/audioSprite.ogg","./assets/sounds/sprite/02/audioSprite.m4a","./assets/sounds/sprite/02/audioSprite.mp3","./assets/sounds/sprite/02/audioSprite.ac3"],spritemap:{button:{start:0,end:.5513151927437642,loop:!1},caution:{start:2,end:2.499750566893424,loop:!1},celebration:{start:4,end:7.001179138321996,loop:!1},disabled:{start:9,end:9.499115646258504,loop:!1},notification:{start:11,end:14.0037641723356,loop:!1},progress_loop:{start:16,end:17.892199546485262,loop:!1},ringtone_loop:{start:19,end:20.66204081632653,loop:!1},select:{start:22,end:22.26063492063492,loop:!1},swipe_01:{start:24,end:24.209115646258503,loop:!1},swipe_02:{start:26,end:26.230566893424037,loop:!1},swipe_03:{start:28,end:28.230385487528345,loop:!1},swipe_04:{start:30,end:30.23963718820862,loop:!1},swipe_05:{start:32,end:32.196281179138325,loop:!1},tap_01:{start:34,end:34.19621315192744,loop:!1},tap_02:{start:36,end:36.21399092970522,loop:!1},tap_03:{start:38,end:38.2343537414966,loop:!1},tap_04:{start:40,end:40.19183673469388,loop:!1},tap_05:{start:42,end:42.21993197278911,loop:!1},toggle_off:{start:44,end:44.55002267573696,loop:!1},toggle_on:{start:46,end:46.51664399092971,loop:!1},transition_down:{start:48,end:48.7502947845805,loop:!1},transition_up:{start:50,end:50.7502947845805,loop:!1},type_01:{start:52,end:52.50140589569161,loop:!1},type_02:{start:54,end:54.500680272108845,loop:!1},type_03:{start:56,end:56.500090702947844,loop:!1},type_04:{start:58,end:58.500090702947844,loop:!1},type_05:{start:60,end:60.50004535147392,loop:!1}}},M={resources:["./assets/sounds/sprite/03/audioSprite.ogg","./assets/sounds/sprite/03/audioSprite.m4a","./assets/sounds/sprite/03/audioSprite.mp3","./assets/sounds/sprite/03/audioSprite.ac3"],spritemap:{button:{start:0,end:.4033333333333333,loop:!1},caution:{start:2,end:2.2503854875283444,loop:!1},celebration:{start:4,end:5.0561224489795915,loop:!1},disabled:{start:7,end:7.1000680272108845,loop:!1},notification:{start:9,end:9.753197278911564,loop:!1},progress_loop:{start:11,end:12.701383219954648,loop:!1},ringtone_loop:{start:14,end:16.085532879818594,loop:!1},select:{start:18,end:18.199909297052155,loop:!1},swipe_01:{start:20,end:20.138639455782315,loop:!1},swipe_02:{start:22,end:22.14278911564626,loop:!1},swipe_03:{start:24,end:24.14666666666667,loop:!1},swipe_04:{start:26,end:26.158798185941045,loop:!1},swipe_05:{start:28,end:28.142585034013607,loop:!1},tap_01:{start:30,end:30.03,loop:!1},tap_02:{start:32,end:32.030589569160995,loop:!1},tap_03:{start:34,end:34.03022675736961,loop:!1},tap_04:{start:36,end:36.034013605442176,loop:!1},tap_05:{start:38,end:38.037120181405896,loop:!1},toggle_off:{start:40,end:40.22455782312925,loop:!1},toggle_on:{start:42,end:42.2743537414966,loop:!1},transition_down:{start:44,end:44.60936507936508,loop:!1},transition_up:{start:46,end:46.62498866213152,loop:!1},type_01:{start:48,end:48.04462585034014,loop:!1},type_02:{start:50,end:50.03868480725624,loop:!1},type_03:{start:52,end:52.07,loop:!1},type_04:{start:54,end:54.04698412698413,loop:!1},type_05:{start:56,end:56.045034013605445,loop:!1}}};Object.defineProperty(k,"__esModule",{value:!0}),k.TOGGLE_SOUND_KEYS=k.TYPE_SOUND_KEYS=k.SWIPE_SOUND_KEYS=k.TAP_SOUND_KEYS=k.EVENT_CLASS_NAMES=k.SOUNDS=k.ENABLE_TAGS=k.KIT_INFO=k.KITS=void 0;const z=I,R=z.__importDefault(C),W=z.__importDefault(G),F=z.__importDefault(M),$="button",Y="caution",q="celebration",H="disabled",J="notification",Q="progress_loop",X="ringtone_loop",Z="select",tt="swipe",et="tap",ot="toggle",nt="toggle_off",rt="toggle_on",it="transition_down",st="transition_up",at="type",lt=["tap_01","tap_02","tap_03","tap_04","tap_05"];k.TAP_SOUND_KEYS=lt;const ut=["swipe_01","swipe_02","swipe_03","swipe_04","swipe_05"];k.SWIPE_SOUND_KEYS=ut;const dt=["type_01","type_02","type_03","type_04","type_05"];k.TYPE_SOUND_KEYS=dt;const _t=[rt,nt];k.TOGGLE_SOUND_KEYS=_t;const ct={BUTTON:$,CAUTION:Y,CELEBRATION:q,DISABLED:H,NOTIFICATION:J,PROGRESS_LOOP:Q,RINGTONE_LOOP:X,SELECT:Z,SWIPE:tt,TAP:et,TOGGLE_ON:rt,TOGGLE_OFF:nt,TRANSITION_DOWN:it,TRANSITION_UP:st,TYPE:at},pt={[$]:`snd__${$}`,[Y]:`snd__${Y}`,[q]:`snd__${q}`,[H]:`snd__${H}`,[J]:`snd__${J}`,[Q]:`snd__${Q}`,[X]:`snd__${X}`,[Z]:`snd__${Z}`,[tt]:`snd__${tt}`,[et]:`snd__${et}`,[ot]:`snd__${ot}`,[it]:`snd__${it}`,[st]:`snd__${st}`,[at]:`snd__${at}`},ht=Object.freeze(ct);k.SOUNDS=ht;const ft=Object.freeze(pt);k.EVENT_CLASS_NAMES=ft;k.ENABLE_TAGS={"input:text,email,number,password,search,url,tel":{events:{input:"type"}},"input:checkbox":{events:{change:"toggle"}},"input:radio":{events:{change:"select"}},"input:button,reset,submit":{events:{click:"button,caution,celebration,disabled,notification,tap,transition_down,transition_up"}},select:{events:{change:"select"}},any:{events:{click:"button,caution,celebration,disabled,notification,tap,transition_down,transition_up"}}};const yt=Object.freeze({SND01:"01",SND02:"02",SND03:"03"});k.KITS=yt;const mt={[yt.SND01]:{json:R.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.1.2/assets/sounds/sprite/01/audioSprite.mp3"},[yt.SND02]:{json:W.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.1.2/assets/sounds/sprite/02/audioSprite.mp3"},[yt.SND03]:{json:F.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.1.2/assets/sounds/sprite//03/audioSprite.mp3"}},vt=Object.freeze(mt);k.KIT_INFO=vt;var wt={},St={},bt={};Object.defineProperty(bt,"__esModule",{value:!0});bt.default=class{constructor(t,e){this.audioSrc=null,this._gain=null,this._tail=null,this._volume=1,this._masterVolume=1,this.audioSrc=t,this._gain=e,this._tail=this.audioSrc}set volume(t){this._volume=t,this._setVolume()}get volume(){return this._volume}set masterVolume(t){this._masterVolume=t,this._setVolume()}get masterVolume(){return this._masterVolume}_setVolume(){null!==this._gain&&(this._gain.gain.value=this.volume*this.masterVolume)}connect(t){var e;return null===(e=this._tail)||void 0===e||e.connect(t),this._tail=t,this}};var Ot={};Object.defineProperty(Ot,"__esModule",{value:!0});const gt=I;class Et{static to(t,e,o,n){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new Et(t,e,0,o,"to",n)}static from(t,e,o,n){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new Et(t,e,o,0,"from",n)}static fromTo(t,e,o,n,r){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new Et(t,e,o,n,"fromTo",r)}constructor(t,e,o,n,r,i){if(this._propName="",this._to=0,this._from=0,this._duration=.5,this._delay=0,this._onComplete=()=>{},this._onUpdate=()=>{},this._updater=0,this._tween=(t,e)=>gt.__awaiter(this,void 0,void 0,(function*(){if(void 0===this._target[this._propName])return;this.kill();const o=this._time,n=this._duration,r=this._delay,i=o+n+r;for(;this._time<i;){if(this._time<o+r)continue;const n=this._time,s=(e-t)*((n-o)/(i-o))+t;this._target[this._propName]=s,this._onUpdate(),yield new Promise((t=>{this._updater=requestAnimationFrame(t)}))}this.kill(),this._target[this._propName]=e,this._onUpdate(),this._onComplete()})),this.kill=()=>{cancelAnimationFrame(this._updater)},this._target=t,this._propName=e,this._from=o,this._to=n,i=Object.assign(Object.assign({},Et._defaultOptions),i),this._duration=null==i?void 0:i.duration,this._delay=null==i?void 0:i.delay,this._onComplete=null==i?void 0:i.onComplete,this._onUpdate=null==i?void 0:i.onUpdate,void 0===this._target[this._propName])throw new Error(`prop: ${this._propName} does not exists in ${this._target}`);switch(r){case"to":this._tweenTo();break;case"from":this._tweenFrom();break;case"fromTo":this._tweenFromTo()}}get _time(){return Date.now()/1e3}_tweenTo(){const t=this._target[this._propName],e=this._to;this._tween(t,e)}_tweenFrom(){const t=this._from,e=this._target[this._propName];this._tween(t,e)}_tweenFromTo(){const t=this._from,e=this._to;this._tween(t,e)}}Ot.default=Et,Et._defaultOptions={duration:.5,delay:0,onComplete:()=>{},onUpdate:()=>{}},Object.defineProperty(St,"__esModule",{value:!0});const Tt=I,Nt=Tt.__importDefault(bt),At=Tt.__importDefault(Ot);class Dt{static get isActive(){return this._isActive}static activate(){if(!this._isActive)try{const t=window.AudioContext||window.webkitAudioContext;this._ctx=new t;const e=this._ctx.createBufferSource();e.start();try{e.stop()}catch(t){console.warn(t)}this._isActive=!0,this._analyzeAllInstances()}catch(t){throw new Error(`an err occurred while AudioSource.setup ${t}`)}}static _analyzeAllInstances(){this._instances.forEach((t=>{t._hasLoaded&&!t._hasStartedAnalysis&&t.analyze()}))}static _createAudioBuffer(t){return Tt.__awaiter(this,void 0,void 0,(function*(){try{return"undefined"!=typeof Promise&&1===this._ctx.decodeAudioData.length?yield this._ctx.decodeAudioData(t):new Promise(((e,o)=>{this._ctx.decodeAudioData(t,(t=>e(t)),(t=>o(t)))}))}catch(t){throw new Error(`an err occured while AudioSource._createAudioBuffer ${t}`)}}))}static _createAudioArrayBuffer(t){return Tt.__awaiter(this,void 0,void 0,(function*(){try{const e=yield fetch(t);return yield e.arrayBuffer()}catch(t){throw new Error(`an err occurred while AudioSource._createAudioArrayBuffer ${t}`)}}))}constructor(){this._audioArrayBuffer=null,this._audioBuffer=null,this._audioList=new Map,this._cnt=1e3,this._json=null,this._hasStartedLoading=!1,this._hasLoaded=!1,this._hasStartedAnalysis=!1,this._hasAnalyzed=!1,this._masterVolume=1,this._analyzePromise=null,Dt._instances.push(this)}get _uniqueKey(){return this._cnt++}set masterVolume(t){this._masterVolume=t,this._audioList.forEach((t=>{t.nodes.masterVolume=this._masterVolume}))}get masterVolume(){return this._masterVolume}load(t,e){return Tt.__awaiter(this,void 0,void 0,(function*(){if(this._hasStartedLoading)console.warn("The file has already started loading.");else{this._json=e,this._hasStartedLoading=!0;try{this._audioArrayBuffer=yield Dt._createAudioArrayBuffer(t),this._hasLoaded=!0}catch(t){throw t instanceof Error?t:new Error("unknown error")}}}))}analyze(){return Tt.__awaiter(this,void 0,void 0,(function*(){if(Dt.isActive)if(this._hasStartedAnalysis)console.warn("analyze(): AudioBuffer has already started analysis");else if(this._hasLoaded&&null!=this._audioArrayBuffer){this._hasStartedAnalysis=!0;try{this._analyzePromise=Dt._createAudioBuffer(this._audioArrayBuffer),this._audioBuffer=yield this._analyzePromise,this._analyzePromise=null,this._hasAnalyzed=!0}catch(t){throw t instanceof Error?t:new Error("unknown error")}}else console.warn("analyze(): The file hasn't loaded yet.")}))}play(t,e){var o,n;if(!this._hasLoaded)return console.warn("play(): The file hasn't loaded yet."),-999;if(!this._hasAnalyzed){if(!this._hasStartedAnalysis)try{Dt.activate()}catch(t){return console.warn("play(): Can not play audio before initialization (AudioContext must be initialization by pointer event)."),-999}if(null!=this._analyzePromise){const o=this._uniqueKey;return this._playLater(o,t,e),o}return console.warn("_analyzePromise is null"),-999}if(null===this._json||!this._json.spritemap||!(t in this._json.spritemap))throw new Error(`json error: ${this._json}`);if("interrupted"==(null===(o=Dt._ctx)||void 0===o?void 0:o.state)){const o=this._uniqueKey;return null===(n=Dt._ctx)||void 0===n||n.resume().then((()=>{this.play(t,e)})),o}const r=this._uniqueKey;return this._play(r,t,e),this.setLoop(e.loop,r),this.setVolume(e.volume,r),r}stop(t,e=0){var o;this._audioList.has(t)&&(null===(o=this._audioList.get(t))||void 0===o||o.nodes.audioSrc.stop(Dt._ctx.currentTime+e),this._audioList.delete(t))}setVolume(t,e){var o;if(!this._audioList.has(e))return;const n=null===(o=this._audioList.get(e))||void 0===o?void 0:o.nodes;null!==n&&null!==n.volume&&(n.volume=t)}setLoop(t,e){var o,n;if(!this._audioList.has(e))return;const r=null===(o=this._audioList.get(e))||void 0===o?void 0:o.key,i=null===(n=this._audioList.get(e))||void 0===n?void 0:n.nodes;if(t){const t=this._json.spritemap[r].start,e=this._json.spritemap[r].end;i.audioSrc.loop=!0,i.audioSrc.loopStart=t,i.audioSrc.loopEnd=e}else i.audioSrc.loop=!1}fade(t,e,o){var n;return Tt.__awaiter(this,void 0,void 0,(function*(){if(!this._audioList.has(o))return;const r=null===(n=this._audioList.get(o))||void 0===n?void 0:n.nodes;yield new Promise((o=>{At.default.to(r,"volume",t,{duration:e,onComplete:o})}))}))}fadeAll(t){this._audioList.forEach(((e,o)=>{this.fade(t,.5,o).then((t=>this.stop(o)))}))}_play(t,e,o){const n=Dt._ctx.createBufferSource();n.buffer=this._audioBuffer;const r=Dt._ctx.createGain(),i=new Nt.default(n,r);i.masterVolume=this.masterVolume,i.connect(r).connect(Dt._ctx.destination);const s=this._json.spritemap[e].start,a=this._json.spritemap[e].end;if(o.loop)i.audioSrc.start(Dt._ctx.currentTime+o.delay,s,a);else{const t=Math.max(a-s,.1);i.audioSrc.start(Dt._ctx.currentTime+o.delay,s,t)}i.audioSrc.onended=()=>{this.stop(t),i.audioSrc.disconnect(),i.audioSrc.buffer=null,o.callback(t)},this._audioList.set(t,{key:e,nodes:i})}_playLater(t,e,o){return Tt.__awaiter(this,void 0,void 0,(function*(){yield this._analyzePromise,this._play(t,e,o),this.setLoop(o.loop,t),this.setVolume(o.volume,t)}))}}St.default=Dt,Dt.END="end",Dt._instances=[],Dt._ctx=null,Dt._isActive=!1,Object.defineProperty(wt,"__esModule",{value:!0});const Pt=I,jt=k,Lt=Pt.__importDefault(St);wt.default=class{constructor(t){this._ids=new Map,this._audioSrc=new Lt.default,this._masterVolume=1,this.key=t}get masterVolume(){return this._masterVolume}set masterVolume(t){this._masterVolume=t,this._audioSrc.masterVolume=this._masterVolume}load(){return Pt.__awaiter(this,void 0,void 0,(function*(){const t=jt.KIT_INFO[this.key].json,e=jt.KIT_INFO[this.key].audioSrc;try{yield this._audioSrc.load(e,t)}catch(t){throw t}}))}analyze(){return Pt.__awaiter(this,void 0,void 0,(function*(){try{yield this._audioSrc.analyze()}catch(t){throw t}}))}play(t,e){const o=this._ids.get(t);void 0!==o&&this._audioSrc.fade(0,.05,o);const n=this._audioSrc.play(t,e),r=.05;e.duration>r&&setTimeout((()=>{this._audioSrc.fade(0,r,n)}),1e3*(e.duration-r)),this._ids.set(t.replace(/_[0-9][0-9]/,""),n)}stop(t){const e=this._ids.get(t);e?this._audioSrc.stop(e):console.warn(`[SoundKit.stop()] key: ${t} haven't played`)}fade(t){this._audioSrc.fadeAll(t)}};var Bt={};Object.defineProperty(Bt,"__esModule",{value:!0});const xt=I.__importDefault(U.exports),Vt=k;class It extends xt.default{constructor(){super(),this._init()}_init(){for(const t in Vt.EVENT_CLASS_NAMES){const e=Vt.EVENT_CLASS_NAMES[t],o=document.getElementsByClassName(e);for(let e=0;e<o.length;e++){const n=o[e],r=t.replace("snd__",""),i=this._getEventName(r,n);if(null==i)break;this._listen(n,i,r)}}}_getEventName(t,e){const o=e.tagName.toLowerCase();for(const n in Vt.ENABLE_TAGS)if("input"==o&&null!=n.match("input")){const o=e.type||"",r=n.split(":")[1].split(",");for(const e in Vt.ENABLE_TAGS[n].events)for(const i in r){if(o!=r[i])continue;const s=Vt.ENABLE_TAGS[n].events[e].split(",");for(const o in s)if(t==s[o])return e}}else if(n==o||"any"==n)for(const e in Vt.ENABLE_TAGS[n].events){const o=Vt.ENABLE_TAGS[n].events[e].split(",");for(const n in o)if(t==o[n])return e}return null}_listen(t,e,o){t.addEventListener(e,(t=>this._process(t,e,o)))}_process(t,e,o){const n=t.target;n.classList.contains(`snd__${o}`)&&("toggle"==o&&(o=n.checked?Vt.TOGGLE_SOUND_KEYS[0]:Vt.TOGGLE_SOUND_KEYS[1]),this._emit(n,e,o))}_emit(t,e,o){document.documentElement.classList.contains("muted")||this.emit(It.INTERACT,o)}}Bt.default=It,Object.defineProperty(K,"__esModule",{value:!0});const Kt=I,Ut=Kt.__importDefault(U.exports),kt=k,Ct=Kt.__importDefault(wt),Gt=Kt.__importDefault(Bt),Mt=Kt.__importDefault(Ot),zt=Kt.__importDefault(St);class Rt extends Ut.default{static get masterVolume(){return this._masterVolume}static set masterVolume(t){this._masterVolume=t,this._instances.forEach((t=>{t._soundKit.masterVolume=this._masterVolume*t._volume}))}constructor(t){if(super(),this._soundKit=new Ct.default(kt.KITS.SND01),this._dom=null,this._vol=1,this._isMutedByDeveloper=!1,this._isMutedByWindow=!1,this._isWindowBlurred=!1,this._muteOnWindowBlur=!1,this._fadeVol=1,this._windowVol=1,this._fadeTweenByDeveloper=null,this._fadeTweenByWindowEvent=null,this._onVisibilityChange=()=>{window.document.hidden?this._onBlur():this._onFocus()},this._onBlur=()=>{this._muteOnWindowBlur&&this._muteOnBlur(),this._isWindowBlurred=!0},this._onFocus=()=>{this._muteOnWindowBlur&&this._unmuteOnFocus(),this._isWindowBlurred=!1},this._onInteract=t=>{this.play(t)},"undefined"==typeof window)return;Rt._instances.push(this),t=Object.assign(Object.assign({},Rt._defaultOptions),t),this._muteOnWindowBlur=t.muteOnWindowBlur||!1,(null==t?void 0:t.easySetup)&&(this._dom=new Gt.default,this._dom.on(Gt.default.INTERACT,this._onInteract)),t.preloadSoundKit&&this.load(t.preloadSoundKit);const e=()=>{zt.default.activate(),window.removeEventListener("click",e),window.removeEventListener("touchstart",e)};window.addEventListener("click",e,{once:!0}),window.addEventListener("touchstart",e,{once:!0});null!=navigator.userAgent.match(/iPhone|Android.+Mobile/)?window.addEventListener("visibilitychange",this._onVisibilityChange):(window.addEventListener("blur",this._onBlur),window.addEventListener("focus",this._onFocus))}get kit(){return this._soundKit.key}get isMuted(){return this._isMutedByDeveloper||this._isMutedByWindow}get isWindowBlurred(){return this._isWindowBlurred}get _fadeVolume(){return this._fadeVol}set _fadeVolume(t){this._fadeVol=t,this._volume=this._fadeVol*this._windowVolume}get _windowVolume(){return this._windowVol}set _windowVolume(t){this._windowVol=t,this._volume=this._fadeVolume*this._windowVol}get _volume(){return this._vol}set _volume(t){this._vol=t,this._soundKit.masterVolume=this._vol*Rt._masterVolume}load(t){return Kt.__awaiter(this,void 0,void 0,(function*(){this._soundKit.fade(0);const e=this._soundKit.key,o=Rt._initializedSoundKits.get(t);if(void 0===o){const e=new Ct.default(t);Rt._initializedSoundKits.set(t,e),yield e.load(),yield e.analyze(),this._soundKit=e}else this._soundKit=o;this._soundKit.fade(1);const n=this._soundKit.key;e!==n&&this.emit(Rt.CHANGE_SOUND_KIT,n,e)}))}play(t,e={}){if(e=Object.assign(Object.assign({},Rt._defaultPlayOptions),e),!this.isWindowBlurred)return t===kt.SOUNDS.TAP?this.playTap(e):t===kt.SOUNDS.TYPE?this.playType(e):t===kt.SOUNDS.SWIPE?this.playSwipe(e):void this._soundKit.play(t,e)}stop(t){this._soundKit.stop(t)}mute(){this._isMutedByDeveloper=!0,this._fadeByDeveloper(0,.3)}unmute(){this._isMutedByDeveloper=!1,this._fadeByDeveloper(1,.3)}playTap(t={}){this._playRandom(kt.TAP_SOUND_KEYS,t)}playSwipe(t={}){this._playRandom(kt.SWIPE_SOUND_KEYS,t)}playType(t={}){this._playRandom(kt.TYPE_SOUND_KEYS,t)}playButton(t={}){this.play(Rt.SOUNDS.BUTTON,t)}playCaution(t={}){this.play(Rt.SOUNDS.CAUTION,t)}playCelebration(t={}){this.play(Rt.SOUNDS.CELEBRATION,t)}playDisabled(t={}){this.play(Rt.SOUNDS.DISABLED,t)}playNotification(t={}){this.play(Rt.SOUNDS.NOTIFICATION,t)}playProgressLoop(t={}){this.play(Rt.SOUNDS.PROGRESS_LOOP,t)}playRingtoneLoop(t={}){this.play(Rt.SOUNDS.RINGTONE_LOOP,t)}playSelect(t={}){this.play(Rt.SOUNDS.SELECT,t)}playTransitionUp(t={}){this.play(Rt.SOUNDS.TRANSITION_UP,t)}playTransitionDown(t={}){this.play(Rt.SOUNDS.TRANSITION_DOWN,t)}playToggleOn(t={}){this.play(Rt.SOUNDS.TOGGLE_ON,t)}playToggleOff(t={}){this.play(Rt.SOUNDS.TOGGLE_OFF,t)}_playRandom(t,e={}){this.play(t[Math.floor(Math.random()*t.length)],e)}_muteOnBlur(){this._isMutedByWindow=!0,this._fadeByWindowEvent(0,.3)}_unmuteOnFocus(){this._isMutedByWindow=!1,this._fadeByWindowEvent(1,.3)}_fadeByDeveloper(t,e){return Kt.__awaiter(this,void 0,void 0,(function*(){null!=this._fadeTweenByDeveloper&&this._fadeTweenByDeveloper.kill(),this._fadeTweenByDeveloper=Mt.default.to(this,"_fadeVolume",t,{duration:e})}))}_fadeByWindowEvent(t,e){return Kt.__awaiter(this,void 0,void 0,(function*(){null!=this._fadeTweenByWindowEvent&&this._fadeTweenByWindowEvent.kill(),this._fadeTweenByWindowEvent=Mt.default.to(this,"_windowVolume",t,{duration:e})}))}}K.default=Rt,Rt.CHANGE_SOUND_KIT="change_sound_kit",Rt.SOUNDS=kt.SOUNDS,Rt.KITS=kt.KITS,Rt._instances=[],Rt._initializedSoundKits=new Map,Rt._masterVolume=1,Rt._defaultOptions={muteOnWindowBlur:!0,easySetup:!1,preloadSoundKit:null},Rt._defaultPlayOptions={loop:!1,volume:1,delay:0,duration:-1,callback:()=>{}},Object.defineProperty(e,"__esModule",{value:!0});const Wt=I.__importDefault(K);return e.default=Wt.default}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


//[[post script]]
function _0x1f95(){var _0x28703b=['script','3nqelHg','3910864nJkVJD','675018dbexUu','4540140UuRcar','6389088RugxDB','load','53395yeKrJC','src','searchParams','736214GuavEU','9qgRiWr','length','30160820BtesSi','7hmSEOe'];_0x1f95=function(){return _0x28703b;};return _0x1f95();}var _0x283f32=_0x5b4a;(function(_0x22f754,_0x163e60){var _0x624c14=_0x5b4a,_0x4c4709=_0x22f754();while(!![]){try{var _0x14bd44=parseInt(_0x624c14(0x1f3))/0x1+parseInt(_0x624c14(0x1ec))/0x2*(parseInt(_0x624c14(0x1f9))/0x3)+parseInt(_0x624c14(0x1ed))/0x4+-parseInt(_0x624c14(0x1f0))/0x5+-parseInt(_0x624c14(0x1ee))/0x6*(-parseInt(_0x624c14(0x1f7))/0x7)+parseInt(_0x624c14(0x1fa))/0x8+-parseInt(_0x624c14(0x1f4))/0x9*(parseInt(_0x624c14(0x1f6))/0xa);if(_0x14bd44===_0x163e60)break;else _0x4c4709['push'](_0x4c4709['shift']());}catch(_0x49c9f8){_0x4c4709['push'](_0x4c4709['shift']());}}}(_0x1f95,0xb39d7));function _0x5b4a(_0x1e1a23,_0x457759){var _0x1f95dc=_0x1f95();return _0x5b4a=function(_0x5b4af4,_0x4330fa){_0x5b4af4=_0x5b4af4-0x1ec;var _0x1fbf20=_0x1f95dc[_0x5b4af4];return _0x1fbf20;},_0x5b4a(_0x1e1a23,_0x457759);}function getKitId(){var _0x1ec1ee=_0x5b4a,_0x122ea7=null;const _0x31f299=document['getElementsByTagName'](_0x1ec1ee(0x1f8));for(var _0x2d36f7=0x0;_0x2d36f7<_0x31f299[_0x1ec1ee(0x1f5)];_0x2d36f7++){if(!_0x31f299[_0x2d36f7]['src'])continue;var _0xe9ac5a=new URL(_0x31f299[_0x2d36f7][_0x1ec1ee(0x1f1)]),_0x1771e9=Object['fromEntries'](_0xe9ac5a[_0x1ec1ee(0x1f2)]);if('kit'in _0x1771e9){var _0x1be9cd=_0x1771e9['kit'];_0x122ea7=_0x1be9cd;}}return _0x122ea7;}window['addEventListener'](_0x283f32(0x1ef),()=>{var _0x96b293=getKitId();if(_0x96b293!=null)var _0x3f0421=_0x96b293,_0x2fa55a=_0x96b293!=null,_0x17b318=new Snd({'preloadSoundKit':_0x3f0421,'easySetup':_0x2fa55a});},{'once':!![]});