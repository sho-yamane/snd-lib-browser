/**
   * @license
   * Snd.js v1.0.0
   * Released under the MIT License.
   */
var Snd=function(){"use strict";function t(t){if(t.__esModule)return t;var e=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(t).forEach((function(n){var o=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,o.get?o:{enumerable:!0,get:function(){return t[n]}})})),e}var e={};function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)};function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var i=function(){return i=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},i.apply(this,arguments)};function s(t,e){var n={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(t);r<o.length;r++)e.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(t,o[r])&&(n[o[r]]=t[o[r]])}return n}function a(t,e,o,r){var i,s=arguments.length,a=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,o):r;if("object"===("undefined"==typeof Reflect?"undefined":n(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,r);else for(var l=t.length-1;l>=0;l--)(i=t[l])&&(a=(s<3?i(a):s>3?i(e,o,a):i(e,o))||a);return s>3&&a&&Object.defineProperty(e,o,a),a}function l(t,e){return function(n,o){e(n,o,t)}}function u(t,e){if("object"===("undefined"==typeof Reflect?"undefined":n(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function c(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{l(o.next(t))}catch(t){i(t)}}function a(t){try{l(o.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((o=o.apply(t,e||[])).next())}))}function d(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(s=0)),s;)try{if(n=1,o&&(r=2&a[0]?o.return:a[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,a[1])).done)return r;switch(o=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,o=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],o=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}}var _=Object.create?function(t,e,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(e,n);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,o,r)}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]};function p(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||_(e,t,n)}function f(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],o=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function h(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,r,i=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(o=i.next()).done;)s.push(o.value)}catch(t){r={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return s}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(h(arguments[e]));return t}function v(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var o=Array(t),r=0;for(e=0;e<n;e++)for(var i=arguments[e],s=0,a=i.length;s<a;s++,r++)o[r]=i[s];return o}function m(t,e,n){if(n||2===arguments.length)for(var o,r=0,i=e.length;r<i;r++)!o&&r in e||(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return t.concat(o||Array.prototype.slice.call(e))}function w(t){return this instanceof w?(this.v=t,this):new w(t)}function S(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,r=n.apply(t,e||[]),i=[];return o={},s("next"),s("throw"),s("return"),o[Symbol.asyncIterator]=function(){return this},o;function s(t){r[t]&&(o[t]=function(e){return new Promise((function(n,o){i.push([t,e,n,o])>1||a(t,e)}))})}function a(t,e){try{(n=r[t](e)).value instanceof w?Promise.resolve(n.value.v).then(l,u):c(i[0][2],n)}catch(t){c(i[0][3],t)}var n}function l(t){a("next",t)}function u(t){a("throw",t)}function c(t,e){t(e),i.shift(),i.length&&a(i[0][0],i[0][1])}}function g(t){var e,n;return e={},o("next"),o("throw",(function(t){throw t})),o("return"),e[Symbol.iterator]=function(){return this},e;function o(o,r){e[o]=t[o]?function(e){return(n=!n)?{value:w(t[o](e)),done:!1}:r?r(e):e}:r}}function b(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=f(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(o,r){(function(t,e,n,o){Promise.resolve(o).then((function(e){t({value:e,done:n})}),e)})(o,r,(e=t[n](e)).done,e.value)}))}}}function O(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var E=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e};function T(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&_(e,t,n);return E(e,t),e}function L(t){return t&&t.__esModule?t:{default:t}}function N(t,e,n,o){if("a"===n&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?o:"a"===n?o.call(t):o?o.value:e.get(t)}function A(t,e,n,o,r){if("m"===o)throw new TypeError("Private method is not writable");if("a"===o&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===o?r.call(t,n):r?r.value=n:e.set(t,n),n}function j(t,e){if(null===e||"object"!==n(e)&&"function"!=typeof e)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof t?e===t:t.has(e)}function P(t,e,o){if(null!=e){if("object"!==n(e)&&"function"!=typeof e)throw new TypeError("Object expected.");var r;if(o){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");r=e[Symbol.asyncDispose]}if(void 0===r){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");r=e[Symbol.dispose]}if("function"!=typeof r)throw new TypeError("Object not disposable.");t.stack.push({value:e,dispose:r,async:o})}else o&&t.stack.push({async:!0});return e}var D="function"==typeof SuppressedError?SuppressedError:function(t,e,n){var o=new Error(n);return o.name="SuppressedError",o.error=t,o.suppressed=e,o};function x(t){function e(e){t.error=t.hasError?new D(e,t.error,"An error was suppressed during disposal."):e,t.hasError=!0}return function n(){for(;t.stack.length;){var o=t.stack.pop();try{var r=o.dispose&&o.dispose.call(o.value);if(o.async)return Promise.resolve(r).then(n,(function(t){return e(t),n()}))}catch(t){e(t)}}if(t.hasError)throw t.error}()}var B={__extends:r,__assign:i,__rest:s,__decorate:a,__param:l,__metadata:u,__awaiter:c,__generator:d,__createBinding:_,__exportStar:p,__values:f,__read:h,__spread:y,__spreadArrays:v,__spreadArray:m,__await:w,__asyncGenerator:S,__asyncDelegator:g,__asyncValues:b,__makeTemplateObject:O,__importStar:T,__importDefault:L,__classPrivateFieldGet:N,__classPrivateFieldSet:A,__classPrivateFieldIn:j,__addDisposableResource:P,__disposeResources:x},I=Object.freeze({__proto__:null,__extends:r,get __assign(){return i},__rest:s,__decorate:a,__param:l,__esDecorate:function(t,e,o,r,i,s){function a(t){if(void 0!==t&&"function"!=typeof t)throw new TypeError("Function expected");return t}for(var l,u=r.kind,c="getter"===u?"get":"setter"===u?"set":"value",d=!e&&t?r.static?t:t.prototype:null,_=e||(d?Object.getOwnPropertyDescriptor(d,r.name):{}),p=!1,f=o.length-1;f>=0;f--){var h={};for(var y in r)h[y]="access"===y?{}:r[y];for(var y in r.access)h.access[y]=r.access[y];h.addInitializer=function(t){if(p)throw new TypeError("Cannot add initializers after decoration has completed");s.push(a(t||null))};var v=(0,o[f])("accessor"===u?{get:_.get,set:_.set}:_[c],h);if("accessor"===u){if(void 0===v)continue;if(null===v||"object"!==n(v))throw new TypeError("Object expected");(l=a(v.get))&&(_.get=l),(l=a(v.set))&&(_.set=l),(l=a(v.init))&&i.unshift(l)}else(l=a(v))&&("field"===u?i.unshift(l):_[c]=l)}d&&Object.defineProperty(d,r.name,_),p=!0},__runInitializers:function(t,e,n){for(var o=arguments.length>2,r=0;r<e.length;r++)n=o?e[r].call(t,n):e[r].call(t);return o?n:void 0},__propKey:function(t){return"symbol"===n(t)?t:"".concat(t)},__setFunctionName:function(t,e,o){return"symbol"===n(e)&&(e=e.description?"[".concat(e.description,"]"):""),Object.defineProperty(t,"name",{configurable:!0,value:o?"".concat(o," ",e):e})},__metadata:u,__awaiter:c,__generator:d,__createBinding:_,__exportStar:p,__values:f,__read:h,__spread:y,__spreadArrays:v,__spreadArray:m,__await:w,__asyncGenerator:S,__asyncDelegator:g,__asyncValues:b,__makeTemplateObject:O,__importStar:T,__importDefault:L,__classPrivateFieldGet:N,__classPrivateFieldSet:A,__classPrivateFieldIn:j,__addDisposableResource:P,__disposeResources:x,default:B}),V=t(I),C={},K={exports:{}};!function(t){var e=Object.prototype.hasOwnProperty,n="~";function o(){}function r(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function i(t,e,o,i,s){if("function"!=typeof o)throw new TypeError("The listener must be a function");var a=new r(o,i||t,s),l=n?n+e:e;return t._events[l]?t._events[l].fn?t._events[l]=[t._events[l],a]:t._events[l].push(a):(t._events[l]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new o:delete t._events[e]}function a(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(n=!1)),a.prototype.eventNames=function(){var t,o,r=[];if(0===this._eventsCount)return r;for(o in t=this._events)e.call(t,o)&&r.push(n?o.slice(1):o);return Object.getOwnPropertySymbols?r.concat(Object.getOwnPropertySymbols(t)):r},a.prototype.listeners=function(t){var e=n?n+t:t,o=this._events[e];if(!o)return[];if(o.fn)return[o.fn];for(var r=0,i=o.length,s=new Array(i);r<i;r++)s[r]=o[r].fn;return s},a.prototype.listenerCount=function(t){var e=n?n+t:t,o=this._events[e];return o?o.fn?1:o.length:0},a.prototype.emit=function(t,e,o,r,i,s){var a=n?n+t:t;if(!this._events[a])return!1;var l,u,c=this._events[a],d=arguments.length;if(c.fn){switch(c.once&&this.removeListener(t,c.fn,void 0,!0),d){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,o),!0;case 4:return c.fn.call(c.context,e,o,r),!0;case 5:return c.fn.call(c.context,e,o,r,i),!0;case 6:return c.fn.call(c.context,e,o,r,i,s),!0}for(u=1,l=new Array(d-1);u<d;u++)l[u-1]=arguments[u];c.fn.apply(c.context,l)}else{var _,p=c.length;for(u=0;u<p;u++)switch(c[u].once&&this.removeListener(t,c[u].fn,void 0,!0),d){case 1:c[u].fn.call(c[u].context);break;case 2:c[u].fn.call(c[u].context,e);break;case 3:c[u].fn.call(c[u].context,e,o);break;case 4:c[u].fn.call(c[u].context,e,o,r);break;default:if(!l)for(_=1,l=new Array(d-1);_<d;_++)l[_-1]=arguments[_];c[u].fn.apply(c[u].context,l)}}return!0},a.prototype.on=function(t,e,n){return i(this,t,e,n,!1)},a.prototype.once=function(t,e,n){return i(this,t,e,n,!0)},a.prototype.removeListener=function(t,e,o,r){var i=n?n+t:t;if(!this._events[i])return this;if(!e)return s(this,i),this;var a=this._events[i];if(a.fn)a.fn!==e||r&&!a.once||o&&a.context!==o||s(this,i);else{for(var l=0,u=[],c=a.length;l<c;l++)(a[l].fn!==e||r&&!a[l].once||o&&a[l].context!==o)&&u.push(a[l]);u.length?this._events[i]=1===u.length?u[0]:u:s(this,i)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&s(this,e)):(this._events=new o,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=n,a.EventEmitter=a,t.exports=a}(K);var k={},U={resources:["./assets/sounds/sprite/01/audioSprite.ogg","./assets/sounds/sprite/01/audioSprite.m4a","./assets/sounds/sprite/01/audioSprite.mp3","./assets/sounds/sprite/01/audioSprite.ac3"],spritemap:{button:{start:0,end:.1001814058956916,loop:!1},caution:{start:2,end:2.160544217687075,loop:!1},celebration:{start:4,end:5,loop:!1},disabled:{start:6,end:6.070113378684807,loop:!1},notification:{start:8,end:8.30031746031746,loop:!1},progress_loop:{start:10,end:11.5,loop:!1},ringtone_loop:{start:13,end:15,loop:!1},select:{start:16,end:16.1,loop:!1},swipe:{start:18,end:18.15,loop:!1},swipe_01:{start:20,end:20.15,loop:!1},swipe_02:{start:22,end:22.150272108843538,loop:!1},swipe_03:{start:24,end:24.150272108843538,loop:!1},swipe_04:{start:26,end:26.15,loop:!1},swipe_05:{start:28,end:28.15,loop:!1},tap_01:{start:30,end:30.01,loop:!1},tap_02:{start:32,end:32.01,loop:!1},tap_03:{start:34,end:34.01004535147392,loop:!1},tap_04:{start:36,end:36.01002267573696,loop:!1},tap_05:{start:38,end:38.01,loop:!1},toggle_off:{start:40,end:40.09972789115646,loop:!1},toggle_on:{start:42,end:42.09972789115646,loop:!1},transition_down:{start:44,end:44.10018140589569,loop:!1},transition_up:{start:46,end:46.10063492063492,loop:!1},type_01:{start:48,end:48.010068027210885,loop:!1},type_02:{start:50,end:50.01011337868481,loop:!1},type_03:{start:52,end:52.010068027210885,loop:!1},type_04:{start:54,end:54.0102947845805,loop:!1},type_05:{start:56,end:56.01011337868481,loop:!1}}},M={resources:["./assets/sounds/sprite/02/audioSprite.ogg","./assets/sounds/sprite/02/audioSprite.m4a","./assets/sounds/sprite/02/audioSprite.mp3","./assets/sounds/sprite/02/audioSprite.ac3"],spritemap:{button:{start:0,end:.5513151927437642,loop:!1},caution:{start:2,end:2.499750566893424,loop:!1},celebration:{start:4,end:7.001179138321996,loop:!1},disabled:{start:9,end:9.499115646258504,loop:!1},notification:{start:11,end:14.0037641723356,loop:!1},progress_loop:{start:16,end:17.892199546485262,loop:!1},ringtone_loop:{start:19,end:20.66204081632653,loop:!1},select:{start:22,end:22.26063492063492,loop:!1},swipe_01:{start:24,end:24.209115646258503,loop:!1},swipe_02:{start:26,end:26.230566893424037,loop:!1},swipe_03:{start:28,end:28.230385487528345,loop:!1},swipe_04:{start:30,end:30.23963718820862,loop:!1},swipe_05:{start:32,end:32.196281179138325,loop:!1},tap_01:{start:34,end:34.19621315192744,loop:!1},tap_02:{start:36,end:36.21399092970522,loop:!1},tap_03:{start:38,end:38.2343537414966,loop:!1},tap_04:{start:40,end:40.19183673469388,loop:!1},tap_05:{start:42,end:42.21993197278911,loop:!1},toggle_off:{start:44,end:44.55002267573696,loop:!1},toggle_on:{start:46,end:46.51664399092971,loop:!1},transition_down:{start:48,end:48.7502947845805,loop:!1},transition_up:{start:50,end:50.7502947845805,loop:!1},type_01:{start:52,end:52.50140589569161,loop:!1},type_02:{start:54,end:54.500680272108845,loop:!1},type_03:{start:56,end:56.500090702947844,loop:!1},type_04:{start:58,end:58.500090702947844,loop:!1},type_05:{start:60,end:60.50004535147392,loop:!1}}},R={resources:["./assets/sounds/sprite/03/audioSprite.ogg","./assets/sounds/sprite/03/audioSprite.m4a","./assets/sounds/sprite/03/audioSprite.mp3","./assets/sounds/sprite/03/audioSprite.ac3"],spritemap:{button:{start:0,end:.4033333333333333,loop:!1},caution:{start:2,end:2.2503854875283444,loop:!1},celebration:{start:4,end:5.0561224489795915,loop:!1},disabled:{start:7,end:7.1000680272108845,loop:!1},notification:{start:9,end:9.753197278911564,loop:!1},progress_loop:{start:11,end:12.701383219954648,loop:!1},ringtone_loop:{start:14,end:16.085532879818594,loop:!1},select:{start:18,end:18.199909297052155,loop:!1},swipe_01:{start:20,end:20.138639455782315,loop:!1},swipe_02:{start:22,end:22.14278911564626,loop:!1},swipe_03:{start:24,end:24.14666666666667,loop:!1},swipe_04:{start:26,end:26.158798185941045,loop:!1},swipe_05:{start:28,end:28.142585034013607,loop:!1},tap_01:{start:30,end:30.03,loop:!1},tap_02:{start:32,end:32.030589569160995,loop:!1},tap_03:{start:34,end:34.03022675736961,loop:!1},tap_04:{start:36,end:36.034013605442176,loop:!1},tap_05:{start:38,end:38.037120181405896,loop:!1},toggle_off:{start:40,end:40.22455782312925,loop:!1},toggle_on:{start:42,end:42.2743537414966,loop:!1},transition_down:{start:44,end:44.60936507936508,loop:!1},transition_up:{start:46,end:46.62498866213152,loop:!1},type_01:{start:48,end:48.04462585034014,loop:!1},type_02:{start:50,end:50.03868480725624,loop:!1},type_03:{start:52,end:52.07,loop:!1},type_04:{start:54,end:54.04698412698413,loop:!1},type_05:{start:56,end:56.045034013605445,loop:!1}}};Object.defineProperty(k,"__esModule",{value:!0}),k.TOGGLE_SOUND_KEYS=k.TYPE_SOUND_KEYS=k.SWIPE_SOUND_KEYS=k.TAP_SOUND_KEYS=k.EVENT_CLASS_NAMES=k.SOUNDS=k.ENABLE_TAGS=k.KIT_INFO=k.KITS=void 0;const G=V,F=G.__importDefault(U),z=G.__importDefault(M),W=G.__importDefault(R),$="button",Y="caution",q="celebration",H="disabled",J="notification",Q="progress_loop",X="ringtone_loop",Z="select",tt="swipe",et="tap",nt="toggle",ot="toggle_off",rt="toggle_on",it="transition_down",st="transition_up",at="type",lt=["tap_01","tap_02","tap_03","tap_04","tap_05"];k.TAP_SOUND_KEYS=lt;const ut=["swipe_01","swipe_02","swipe_03","swipe_04","swipe_05"];k.SWIPE_SOUND_KEYS=ut;const ct=["type_01","type_02","type_03","type_04","type_05"];k.TYPE_SOUND_KEYS=ct;const dt=[rt,ot];k.TOGGLE_SOUND_KEYS=dt;const _t={BUTTON:$,CAUTION:Y,CELEBRATION:q,DISABLED:H,NOTIFICATION:J,PROGRESS_LOOP:Q,RINGTONE_LOOP:X,SELECT:Z,SWIPE:tt,TAP:et,TOGGLE_ON:rt,TOGGLE_OFF:ot,TRANSITION_DOWN:it,TRANSITION_UP:st,TYPE:at},pt={[$]:`snd__${$}`,[Y]:`snd__${Y}`,[q]:`snd__${q}`,[H]:`snd__${H}`,[J]:`snd__${J}`,[Q]:`snd__${Q}`,[X]:`snd__${X}`,[Z]:`snd__${Z}`,[tt]:`snd__${tt}`,[et]:`snd__${et}`,[nt]:`snd__${nt}`,[it]:`snd__${it}`,[st]:`snd__${st}`,[at]:`snd__${at}`},ft=Object.freeze(_t);k.SOUNDS=ft;const ht=Object.freeze(pt);k.EVENT_CLASS_NAMES=ht;k.ENABLE_TAGS={"input:text,email,number,password,search,url,tel":{events:{input:"type"}},"input:checkbox":{events:{change:"toggle"}},"input:radio":{events:{change:"select"}},"input:button,reset,submit":{events:{click:"button,caution,celebration,disabled,notification,tap,transition_down,transition_up"}},select:{events:{change:"select"}},any:{events:{click:"button,caution,celebration,disabled,notification,tap,transition_down,transition_up"}}};const yt=Object.freeze({SND01:"01",SND02:"02",SND03:"03"});k.KITS=yt;const vt={[yt.SND01]:{json:F.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.1.2/assets/sounds/sprite/01/audioSprite.mp3"},[yt.SND02]:{json:z.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.1.2/assets/sounds/sprite/02/audioSprite.mp3"},[yt.SND03]:{json:W.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.1.2/assets/sounds/sprite//03/audioSprite.mp3"}},mt=Object.freeze(vt);k.KIT_INFO=mt;var wt={},St={},gt={};Object.defineProperty(gt,"__esModule",{value:!0});gt.default=class{constructor(t,e){this.audioSrc=null,this._gain=null,this._tail=null,this._volume=1,this._masterVolume=1,this.audioSrc=t,this._gain=e,this._tail=this.audioSrc}set volume(t){this._volume=t,this._setVolume()}get volume(){return this._volume}set masterVolume(t){this._masterVolume=t,this._setVolume()}get masterVolume(){return this._masterVolume}_setVolume(){null!==this._gain&&(this._gain.gain.value=this.volume*this.masterVolume)}connect(t){var e;return null===(e=this._tail)||void 0===e||e.connect(t),this._tail=t,this}};var bt={};Object.defineProperty(bt,"__esModule",{value:!0});const Ot=V;class Et{static to(t,e,n,o){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new Et(t,e,0,n,"to",o)}static from(t,e,n,o){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new Et(t,e,n,0,"from",o)}static fromTo(t,e,n,o,r){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new Et(t,e,n,o,"fromTo",r)}constructor(t,e,n,o,r,i){if(this._propName="",this._to=0,this._from=0,this._duration=.5,this._delay=0,this._onComplete=()=>{},this._onUpdate=()=>{},this._updater=0,this._tween=(t,e)=>Ot.__awaiter(this,void 0,void 0,(function*(){if(void 0===this._target[this._propName])return;this.kill();const n=this._time,o=this._duration,r=this._delay,i=n+o+r;for(;this._time<i;){if(this._time<n+r)continue;const o=this._time,s=(e-t)*((o-n)/(i-n))+t;this._target[this._propName]=s,this._onUpdate(),yield new Promise((t=>{this._updater=requestAnimationFrame(t)}))}this.kill(),this._target[this._propName]=e,this._onUpdate(),this._onComplete()})),this.kill=()=>{cancelAnimationFrame(this._updater)},this._target=t,this._propName=e,this._from=n,this._to=o,i=Object.assign(Object.assign({},Et._defaultOptions),i),this._duration=null==i?void 0:i.duration,this._delay=null==i?void 0:i.delay,this._onComplete=null==i?void 0:i.onComplete,this._onUpdate=null==i?void 0:i.onUpdate,void 0===this._target[this._propName])throw new Error(`prop: ${this._propName} does not exists in ${this._target}`);switch(r){case"to":this._tweenTo();break;case"from":this._tweenFrom();break;case"fromTo":this._tweenFromTo()}}get _time(){return Date.now()/1e3}_tweenTo(){const t=this._target[this._propName],e=this._to;this._tween(t,e)}_tweenFrom(){const t=this._from,e=this._target[this._propName];this._tween(t,e)}_tweenFromTo(){const t=this._from,e=this._to;this._tween(t,e)}}bt.default=Et,Et._defaultOptions={duration:.5,delay:0,onComplete:()=>{},onUpdate:()=>{}},Object.defineProperty(St,"__esModule",{value:!0});const Tt=V,Lt=Tt.__importDefault(gt),Nt=Tt.__importDefault(bt);class At{static get isActive(){return this._isActive}static activate(){if(!this._isActive)try{const t=window.AudioContext||window.webkitAudioContext;this._ctx=new t;const e=this._ctx.createBufferSource();e.start();try{e.stop()}catch(t){console.warn(t)}this._isActive=!0,this._analyzeAllInstances()}catch(t){throw new Error(`an err occurred while AudioSource.setup ${t}`)}}static _analyzeAllInstances(){this._instances.forEach((t=>{t._hasLoaded&&!t._hasStartedAnalysis&&t.analyze()}))}static _createAudioBuffer(t){return Tt.__awaiter(this,void 0,void 0,(function*(){try{return"undefined"!=typeof Promise&&1===this._ctx.decodeAudioData.length?yield this._ctx.decodeAudioData(t):new Promise(((e,n)=>{this._ctx.decodeAudioData(t,(t=>e(t)),(t=>n(t)))}))}catch(t){throw new Error(`an err occured while AudioSource._createAudioBuffer ${t}`)}}))}static _createAudioArrayBuffer(t){return Tt.__awaiter(this,void 0,void 0,(function*(){try{const e=yield fetch(t);return yield e.arrayBuffer()}catch(t){throw new Error(`an err occurred while AudioSource._createAudioArrayBuffer ${t}`)}}))}constructor(){this._audioArrayBuffer=null,this._audioBuffer=null,this._audioList=new Map,this._cnt=1e3,this._json=null,this._hasStartedLoading=!1,this._hasLoaded=!1,this._hasStartedAnalysis=!1,this._hasAnalyzed=!1,this._masterVolume=1,this._analyzePromise=null,At._instances.push(this)}get _uniqueKey(){return this._cnt++}set masterVolume(t){this._masterVolume=t,this._audioList.forEach((t=>{t.nodes.masterVolume=this._masterVolume}))}get masterVolume(){return this._masterVolume}load(t,e){return Tt.__awaiter(this,void 0,void 0,(function*(){if(this._hasStartedLoading)console.warn("The file has already started loading.");else{this._json=e,this._hasStartedLoading=!0;try{this._audioArrayBuffer=yield At._createAudioArrayBuffer(t),this._hasLoaded=!0}catch(t){throw t instanceof Error?t:new Error("unknown error")}}}))}analyze(){return Tt.__awaiter(this,void 0,void 0,(function*(){if(At.isActive)if(this._hasStartedAnalysis)console.warn("analyze(): AudioBuffer has already started analysis");else if(this._hasLoaded&&null!=this._audioArrayBuffer){this._hasStartedAnalysis=!0;try{this._analyzePromise=At._createAudioBuffer(this._audioArrayBuffer),this._audioBuffer=yield this._analyzePromise,this._analyzePromise=null,this._hasAnalyzed=!0}catch(t){throw t instanceof Error?t:new Error("unknown error")}}else console.warn("analyze(): The file hasn't loaded yet.")}))}play(t,e){var n,o;if(!this._hasLoaded)return console.warn("play(): The file hasn't loaded yet."),-999;if(!this._hasAnalyzed){if(!this._hasStartedAnalysis)try{At.activate()}catch(t){return console.warn("play(): Can not play audio before initialization (AudioContext must be initialization by pointer event)."),-999}if(null!=this._analyzePromise){const n=this._uniqueKey;return this._playLater(n,t,e),n}return console.warn("_analyzePromise is null"),-999}if(null===this._json||!this._json.spritemap||!(t in this._json.spritemap))throw new Error(`json error: ${this._json}`);if("interrupted"==(null===(n=At._ctx)||void 0===n?void 0:n.state)){const n=this._uniqueKey;return null===(o=At._ctx)||void 0===o||o.resume().then((()=>{this.play(t,e)})),n}const r=this._uniqueKey;return this._play(r,t,e),this.setLoop(e.loop,r),this.setVolume(e.volume,r),r}stop(t,e=0){var n;this._audioList.has(t)&&(null===(n=this._audioList.get(t))||void 0===n||n.nodes.audioSrc.stop(At._ctx.currentTime+e),this._audioList.delete(t))}setVolume(t,e){var n;if(!this._audioList.has(e))return;const o=null===(n=this._audioList.get(e))||void 0===n?void 0:n.nodes;null!==o&&null!==o.volume&&(o.volume=t)}setLoop(t,e){var n,o;if(!this._audioList.has(e))return;const r=null===(n=this._audioList.get(e))||void 0===n?void 0:n.key,i=null===(o=this._audioList.get(e))||void 0===o?void 0:o.nodes;if(t){const t=this._json.spritemap[r].start,e=this._json.spritemap[r].end;i.audioSrc.loop=!0,i.audioSrc.loopStart=t,i.audioSrc.loopEnd=e}else i.audioSrc.loop=!1}fade(t,e,n){var o;return Tt.__awaiter(this,void 0,void 0,(function*(){if(!this._audioList.has(n))return;const r=null===(o=this._audioList.get(n))||void 0===o?void 0:o.nodes;yield new Promise((n=>{Nt.default.to(r,"volume",t,{duration:e,onComplete:n})}))}))}fadeAll(t){this._audioList.forEach(((e,n)=>{this.fade(t,.5,n).then((t=>this.stop(n)))}))}_play(t,e,n){const o=At._ctx.createBufferSource();o.buffer=this._audioBuffer;const r=At._ctx.createGain(),i=new Lt.default(o,r);i.masterVolume=this.masterVolume,i.connect(r).connect(At._ctx.destination);const s=this._json.spritemap[e].start,a=this._json.spritemap[e].end;if(n.loop)i.audioSrc.start(At._ctx.currentTime+n.delay,s,a);else{const t=Math.max(a-s,.1);i.audioSrc.start(At._ctx.currentTime+n.delay,s,t)}i.audioSrc.onended=()=>{this.stop(t),i.audioSrc.disconnect(),i.audioSrc.buffer=null,n.callback(t)},this._audioList.set(t,{key:e,nodes:i})}_playLater(t,e,n){return Tt.__awaiter(this,void 0,void 0,(function*(){yield this._analyzePromise,this._play(t,e,n),this.setLoop(n.loop,t),this.setVolume(n.volume,t)}))}}St.default=At,At.END="end",At._instances=[],At._ctx=null,At._isActive=!1,Object.defineProperty(wt,"__esModule",{value:!0});const jt=V,Pt=k,Dt=jt.__importDefault(St);wt.default=class{constructor(t){this._ids=new Map,this._audioSrc=new Dt.default,this._masterVolume=1,this.key=t}get masterVolume(){return this._masterVolume}set masterVolume(t){this._masterVolume=t,this._audioSrc.masterVolume=this._masterVolume}load(){return jt.__awaiter(this,void 0,void 0,(function*(){const t=Pt.KIT_INFO[this.key].json,e=Pt.KIT_INFO[this.key].audioSrc;try{yield this._audioSrc.load(e,t)}catch(t){throw t}}))}analyze(){return jt.__awaiter(this,void 0,void 0,(function*(){try{yield this._audioSrc.analyze()}catch(t){throw t}}))}play(t,e){const n=this._ids.get(t);void 0!==n&&this._audioSrc.fade(0,.05,n);const o=this._audioSrc.play(t,e),r=.05;e.duration>r&&setTimeout((()=>{this._audioSrc.fade(0,r,o)}),1e3*(e.duration-r)),this._ids.set(t.replace(/_[0-9][0-9]/,""),o)}stop(t){const e=this._ids.get(t);e?this._audioSrc.stop(e):console.warn(`[SoundKit.stop()] key: ${t} haven't played`)}fade(t){this._audioSrc.fadeAll(t)}};var xt,Bt={},It={exports:{}},Vt="object"===("undefined"==typeof Reflect?"undefined":n(Reflect))?Reflect:null,Ct=Vt&&"function"==typeof Vt.apply?Vt.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};xt=Vt&&"function"==typeof Vt.ownKeys?Vt.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var Kt=Number.isNaN||function(t){return t!=t};function kt(){kt.init.call(this)}It.exports=kt,It.exports.once=function(t,e){return new Promise((function(n,o){function r(n){t.removeListener(e,i),o(n)}function i(){"function"==typeof t.removeListener&&t.removeListener("error",r),n([].slice.call(arguments))}qt(t,e,i,{once:!0}),"error"!==e&&function(t,e,n){"function"==typeof t.on&&qt(t,"error",e,n)}(t,r,{once:!0})}))},kt.EventEmitter=kt,kt.prototype._events=void 0,kt.prototype._eventsCount=0,kt.prototype._maxListeners=void 0;var Ut=10;function Mt(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+n(t))}function Rt(t){return void 0===t._maxListeners?kt.defaultMaxListeners:t._maxListeners}function Gt(t,e,n,o){var r,i,s,a;if(Mt(n),void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),i=t._events),s=i[e]),void 0===s)s=i[e]=n,++t._eventsCount;else if("function"==typeof s?s=i[e]=o?[n,s]:[s,n]:o?s.unshift(n):s.push(n),(r=Rt(t))>0&&s.length>r&&!s.warned){s.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=s.length,a=l,console&&console.warn&&console.warn(a)}return t}function Ft(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function zt(t,e,n){var o={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},r=Ft.bind(o);return r.listener=n,o.wrapFn=r,r}function Wt(t,e,n){var o=t._events;if(void 0===o)return[];var r=o[e];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(r):Yt(r,r.length)}function $t(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function Yt(t,e){for(var n=new Array(e),o=0;o<e;++o)n[o]=t[o];return n}function qt(t,e,o,r){if("function"==typeof t.on)r.once?t.once(e,o):t.on(e,o);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+n(t));t.addEventListener(e,(function n(i){r.once&&t.removeEventListener(e,n),o(i)}))}}Object.defineProperty(kt,"defaultMaxListeners",{enumerable:!0,get:function(){return Ut},set:function(t){if("number"!=typeof t||t<0||Kt(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");Ut=t}}),kt.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},kt.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||Kt(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},kt.prototype.getMaxListeners=function(){return Rt(this)},kt.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var o="error"===t,r=this._events;if(void 0!==r)o=o&&void 0===r.error;else if(!o)return!1;if(o){var i;if(e.length>0&&(i=e[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var a=r[t];if(void 0===a)return!1;if("function"==typeof a)Ct(a,this,e);else{var l=a.length,u=Yt(a,l);for(n=0;n<l;++n)Ct(u[n],this,e)}return!0},kt.prototype.addListener=function(t,e){return Gt(this,t,e,!1)},kt.prototype.on=kt.prototype.addListener,kt.prototype.prependListener=function(t,e){return Gt(this,t,e,!0)},kt.prototype.once=function(t,e){return Mt(e),this.on(t,zt(this,t,e)),this},kt.prototype.prependOnceListener=function(t,e){return Mt(e),this.prependListener(t,zt(this,t,e)),this},kt.prototype.removeListener=function(t,e){var n,o,r,i,s;if(Mt(e),void 0===(o=this._events))return this;if(void 0===(n=o[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete o[t],o.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(r=-1,i=n.length-1;i>=0;i--)if(n[i]===e||n[i].listener===e){s=n[i].listener,r=i;break}if(r<0)return this;0===r?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,r),1===n.length&&(o[t]=n[0]),void 0!==o.removeListener&&this.emit("removeListener",t,s||e)}return this},kt.prototype.off=kt.prototype.removeListener,kt.prototype.removeAllListeners=function(t){var e,n,o;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var r,i=Object.keys(n);for(o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(o=e.length-1;o>=0;o--)this.removeListener(t,e[o]);return this},kt.prototype.listeners=function(t){return Wt(this,t,!0)},kt.prototype.rawListeners=function(t){return Wt(this,t,!1)},kt.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):$t.call(t,e)},kt.prototype.listenerCount=$t,kt.prototype.eventNames=function(){return this._eventsCount>0?xt(this._events):[]},Object.defineProperty(Bt,"__esModule",{value:!0});const Ht=V.__importDefault(It.exports),Jt=k;class Qt extends Ht.default{constructor(){super(),this._init()}_init(){for(const t in Jt.EVENT_CLASS_NAMES){const e=Jt.EVENT_CLASS_NAMES[t],n=document.getElementsByClassName(e);for(let e=0;e<n.length;e++){const o=n[e],r=t.replace("snd__",""),i=this._getEventName(r,o);if(null==i)break;this._listen(o,i,r)}}}_getEventName(t,e){const n=e.tagName.toLowerCase();for(const o in Jt.ENABLE_TAGS)if("input"==n&&null!=o.match("input")){const n=e.type||"",r=o.split(":")[1].split(",");for(const e in Jt.ENABLE_TAGS[o].events)for(const i in r){if(n!=r[i])continue;const s=Jt.ENABLE_TAGS[o].events[e].split(",");for(const n in s)if(t==s[n])return e}}else if(o==n||"any"==o)for(const e in Jt.ENABLE_TAGS[o].events){const n=Jt.ENABLE_TAGS[o].events[e].split(",");for(const o in n)if(t==n[o])return e}return null}_listen(t,e,n){t.addEventListener(e,(t=>this._process(t,e,n)))}_process(t,e,n){const o=t.target;o.classList.contains(`snd__${n}`)&&("toggle"==n&&(n=o.checked?Jt.TOGGLE_SOUND_KEYS[0]:Jt.TOGGLE_SOUND_KEYS[1]),this._emit(o,e,n))}_emit(t,e,n){document.documentElement.classList.contains("muted")||this.emit(Qt.INTERACT,n)}}Bt.default=Qt,Object.defineProperty(C,"__esModule",{value:!0});const Xt=V,Zt=Xt.__importDefault(K.exports),te=k,ee=Xt.__importDefault(wt),ne=Xt.__importDefault(Bt),oe=Xt.__importDefault(bt),re=Xt.__importDefault(St);class ie extends Zt.default{static get masterVolume(){return this._masterVolume}static set masterVolume(t){this._masterVolume=t,this._instances.forEach((t=>{t._soundKit.masterVolume=this._masterVolume*t._volume}))}constructor(t){if(super(),this._soundKit=new ee.default(te.KITS.SND01),this._dom=null,this._vol=1,this._isMutedByDeveloper=!1,this._isMutedByWindow=!1,this._isWindowBlurred=!1,this._muteOnWindowBlur=!1,this._fadeVol=1,this._windowVol=1,this._fadeTweenByDeveloper=null,this._fadeTweenByWindowEvent=null,this._onVisibilityChange=()=>{window.document.hidden?this._onBlur():this._onFocus()},this._onBlur=()=>{this._muteOnWindowBlur&&this._muteOnBlur(),this._isWindowBlurred=!0},this._onFocus=()=>{this._muteOnWindowBlur&&this._unmuteOnFocus(),this._isWindowBlurred=!1},this._onInteract=t=>{this.play(t)},"undefined"==typeof window)return;ie._instances.push(this),t=Object.assign(Object.assign({},ie._defaultOptions),t),this._muteOnWindowBlur=t.muteOnWindowBlur||!1,(null==t?void 0:t.easySetup)&&(this._dom=new ne.default,this._dom.on(ne.default.INTERACT,this._onInteract)),t.preloadSoundKit&&this.load(t.preloadSoundKit);const e=()=>{re.default.activate(),window.removeEventListener("click",e),window.removeEventListener("touchstart",e)};window.addEventListener("click",e,{once:!0}),window.addEventListener("touchstart",e,{once:!0});null!=navigator.userAgent.match(/iPhone|Android.+Mobile/)?window.addEventListener("visibilitychange",this._onVisibilityChange):(window.addEventListener("blur",this._onBlur),window.addEventListener("focus",this._onFocus))}get kit(){return this._soundKit.key}get isMuted(){return this._isMutedByDeveloper||this._isMutedByWindow}get isWindowBlurred(){return this._isWindowBlurred}get _fadeVolume(){return this._fadeVol}set _fadeVolume(t){this._fadeVol=t,this._volume=this._fadeVol*this._windowVolume}get _windowVolume(){return this._windowVol}set _windowVolume(t){this._windowVol=t,this._volume=this._fadeVolume*this._windowVol}get _volume(){return this._vol}set _volume(t){this._vol=t,this._soundKit.masterVolume=this._vol*ie._masterVolume}load(t){return Xt.__awaiter(this,void 0,void 0,(function*(){this._soundKit.fade(0);const e=this._soundKit.key,n=ie._initializedSoundKits.get(t);if(void 0===n){const e=new ee.default(t);ie._initializedSoundKits.set(t,e),yield e.load(),yield e.analyze(),this._soundKit=e}else this._soundKit=n;this._soundKit.fade(1);const o=this._soundKit.key;e!==o&&this.emit(ie.CHANGE_SOUND_KIT,o,e)}))}play(t,e={}){if(e=Object.assign(Object.assign({},ie._defaultPlayOptions),e),!this.isWindowBlurred)return t===te.SOUNDS.TAP?this.playTap(e):t===te.SOUNDS.TYPE?this.playType(e):t===te.SOUNDS.SWIPE?this.playSwipe(e):void this._soundKit.play(t,e)}stop(t){this._soundKit.stop(t)}mute(){this._isMutedByDeveloper=!0,this._fadeByDeveloper(0,.3)}unmute(){this._isMutedByDeveloper=!1,this._fadeByDeveloper(1,.3)}playTap(t={}){this._playRandom(te.TAP_SOUND_KEYS,t)}playSwipe(t={}){this._playRandom(te.SWIPE_SOUND_KEYS,t)}playType(t={}){this._playRandom(te.TYPE_SOUND_KEYS,t)}playButton(t={}){this.play(ie.SOUNDS.BUTTON,t)}playCaution(t={}){this.play(ie.SOUNDS.CAUTION,t)}playCelebration(t={}){this.play(ie.SOUNDS.CELEBRATION,t)}playDisabled(t={}){this.play(ie.SOUNDS.DISABLED,t)}playNotification(t={}){this.play(ie.SOUNDS.NOTIFICATION,t)}playProgressLoop(t={}){this.play(ie.SOUNDS.PROGRESS_LOOP,t)}playRingtoneLoop(t={}){this.play(ie.SOUNDS.RINGTONE_LOOP,t)}playSelect(t={}){this.play(ie.SOUNDS.SELECT,t)}playTransitionUp(t={}){this.play(ie.SOUNDS.TRANSITION_UP,t)}playTransitionDown(t={}){this.play(ie.SOUNDS.TRANSITION_DOWN,t)}playToggleOn(t={}){this.play(ie.SOUNDS.TOGGLE_ON,t)}playToggleOff(t={}){this.play(ie.SOUNDS.TOGGLE_OFF,t)}_playRandom(t,e={}){this.play(t[Math.floor(Math.random()*t.length)],e)}_muteOnBlur(){this._isMutedByWindow=!0,this._fadeByWindowEvent(0,.3)}_unmuteOnFocus(){this._isMutedByWindow=!1,this._fadeByWindowEvent(1,.3)}_fadeByDeveloper(t,e){return Xt.__awaiter(this,void 0,void 0,(function*(){null!=this._fadeTweenByDeveloper&&this._fadeTweenByDeveloper.kill(),this._fadeTweenByDeveloper=oe.default.to(this,"_fadeVolume",t,{duration:e})}))}_fadeByWindowEvent(t,e){return Xt.__awaiter(this,void 0,void 0,(function*(){null!=this._fadeTweenByWindowEvent&&this._fadeTweenByWindowEvent.kill(),this._fadeTweenByWindowEvent=oe.default.to(this,"_windowVolume",t,{duration:e})}))}}C.default=ie,ie.CHANGE_SOUND_KIT="change_sound_kit",ie.SOUNDS=te.SOUNDS,ie.KITS=te.KITS,ie._instances=[],ie._initializedSoundKits=new Map,ie._masterVolume=1,ie._defaultOptions={muteOnWindowBlur:!0,easySetup:!1,preloadSoundKit:null},ie._defaultPlayOptions={loop:!1,volume:1,delay:0,duration:-1,callback:()=>{}},Object.defineProperty(e,"__esModule",{value:!0});const se=V.__importDefault(C);return e.default=se.default}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


//[[post script]]
function _0xeaaa(_0x18e04f,_0x246a94){var _0x4f2034=_0x4f20();return _0xeaaa=function(_0xeaaa8e,_0x364c2e){_0xeaaa8e=_0xeaaa8e-0x73;var _0x413ac1=_0x4f2034[_0xeaaa8e];return _0x413ac1;},_0xeaaa(_0x18e04f,_0x246a94);}var _0x1a29ec=_0xeaaa;(function(_0xd399f9,_0x37d3b5){var _0x5aa0a7=_0xeaaa,_0x4d5a4f=_0xd399f9();while(!![]){try{var _0x21a562=-parseInt(_0x5aa0a7(0x75))/0x1*(-parseInt(_0x5aa0a7(0x80))/0x2)+-parseInt(_0x5aa0a7(0x81))/0x3+-parseInt(_0x5aa0a7(0x7b))/0x4+parseInt(_0x5aa0a7(0x7a))/0x5*(parseInt(_0x5aa0a7(0x85))/0x6)+parseInt(_0x5aa0a7(0x79))/0x7*(-parseInt(_0x5aa0a7(0x78))/0x8)+-parseInt(_0x5aa0a7(0x84))/0x9*(-parseInt(_0x5aa0a7(0x7c))/0xa)+parseInt(_0x5aa0a7(0x7e))/0xb;if(_0x21a562===_0x37d3b5)break;else _0x4d5a4f['push'](_0x4d5a4f['shift']());}catch(_0x11411d){_0x4d5a4f['push'](_0x4d5a4f['shift']());}}}(_0x4f20,0xdaaaa));function getKitId(){var _0x38961a=_0xeaaa,_0x2a726d=null;const _0x381610=document[_0x38961a(0x74)](_0x38961a(0x83));for(var _0x49633c=0x0;_0x49633c<_0x381610[_0x38961a(0x7f)];_0x49633c++){if(!_0x381610[_0x49633c]['src'])continue;var _0x392b79=new URL(_0x381610[_0x49633c][_0x38961a(0x76)]),_0x1b15b4=Object[_0x38961a(0x77)](_0x392b79['searchParams']);if(_0x38961a(0x73)in _0x1b15b4){var _0x76395b=_0x1b15b4[_0x38961a(0x73)];_0x2a726d=_0x76395b;}}return _0x2a726d;}function _0x4f20(){var _0x218610=['length','6AHIarS','3901557TkftXG','load','script','2711403Twhljx','445572tfrrtt','kit','getElementsByTagName','263877kwIvsS','src','fromEntries','8hwitxJ','12365402ocwaEj','115vSSQAg','1737548cjOJrg','40osjGjm','addEventListener','7615575VkZAmE'];_0x4f20=function(){return _0x218610;};return _0x4f20();}window[_0x1a29ec(0x7d)](_0x1a29ec(0x82),()=>{var _0xdde0f5=getKitId();if(_0xdde0f5!=null)var _0x28ab0c=_0xdde0f5,_0x5f331c=_0xdde0f5!=null,_0x471c39=new Snd({'preloadSoundKit':_0x28ab0c,'easySetup':_0x5f331c});},{'once':!![]});